"""
Django settings for meetyourfanBackend project.

Generated by 'django-admin startproject' using Django 5.0.4.
"""

from pathlib import Path
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n&4ami_3763_*^r(6w=3_z@$927*_2ygzbxtjliarf1s)n332i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['www.meetyourfan.io', 'meetyourfan.io','localhost']

AUTH_USER_MODEL = 'api.CustomUser'

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=120),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,  # Use Django's SECRET_KEY
}

# Allow all domains during development
CORS_ALLOW_ALL_ORIGINS = True

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'api',
    'rest_framework_simplejwt.token_blacklist',  # For JWT token management
    'drf_yasg',
    'profileapp',
    'corsheaders',
    'campaign',
    'messagesapp',
    'notificationsapp',
    'base',
    'blockchain.apps.BlockchainConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    
}

# Allow your Next.js domain
CORS_ALLOWED_ORIGINS = [
    "https://testing.meetyourfan.io",
    "http://localhost:3000",
]

ROOT_URLCONF = 'meetyourfanBackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = "meetyourfanBackend.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'pet_db',
        'USER': 'pet_dbuser',
        'PASSWORD': 'Mirza_302',
        'HOST': 'localhost',
        'PORT': '',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CELERY_BEAT_SCHEDULE = {
    'close-expired-campaigns-every-minute': {
         'task': 'campaign.tasks.close_expired_campaigns',
         'schedule': 60.0,  # Run every minute
    },
}

AUTHENTICATION_BACKENDS = [
    'api.custom_auth_backend.EmailOrUsernameBackend',  # Update the path if your file is elsewhere.
    'django.contrib.auth.backends.ModelBackend',  # Fallback backend.
]


EMAIL_BACKEND = 'backend.email.EmailBackend'
EMAIL_HOST = "mail.meetyourfan.io"       # The server provided by Namecheap for non-SSL
EMAIL_PORT = 587
EMAIL_USE_TLS = 1            
EMAIL_HOST_USER = "info@meetyourfan.io"  # Your email address
EMAIL_HOST_PASSWORD = "AmaraLounge2024!" # Replace with the actual password or better, load from an environment variable
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'assets')

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


INSTAGRAM_CLIENT_ID = "9100312026725725"
INSTAGRAM_CLIENT_SECRET = "2c95e5d702eafd0dc2334ad3a5bdb8b3"
INSTAGRAM_REDIRECT_URI = "https://meetyourfan.io/api/instagram/callback/"



# Web3 and Blockchain Configuration
WEB3_PROVIDER_URL = "https://data-seed-prebsc-1-s1.binance.org:8545/"  # For local Ganache; replace with your provider URL for testnets/mainnet
CONTRACT_ADDRESS = "0x6E24F6410A9F6c596761c2D72524FbA174760cD2"  # Replace with the deployed contract address
CONTRACT_ABI_PATH = os.path.join(BASE_DIR, "blockchain", "contract_abi.json")  # Adjust the path as needed

# Private key for signing transactions (use environment variables for production!)
#PRIVATE_KEY = os.environ.get("PRIVATE_KEY", "")
PRIVATE_KEY = "f57620424c3fb97227ed7d45af2332f871d39538fc7f37259acf591151874060"
WERT_SC_SIGNER_KEY = "0x57466afb5491ee372b3b30d82ef7e7a0583c9e36aef0f02435bd164fe172b1d3"

OWNER_ADDRESS = "0x1023477Ad8E2e0bF12A09Ecc73805e2663f27Bfa"

CONVERSION_RATE = 10



